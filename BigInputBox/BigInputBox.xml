<Ui xmlns="http://www.blizzard.com/wow/ui/">

	<Frame name="BigInputBox" parent="UIParent" toplevel="true" hidden="true" frameStrata="FULLSCREEN" frameLevel="5" ignoreParentScale="true" scale="0.71111111111111">
		<Size x="360" y="42"/>
		<Anchors>
			<Anchor point="BOTTOM" x="0" y="330"/>
		</Anchors>
		<Scripts>
			<OnLoad>
				-- Store the defaults as constants
				self.defaultWidth = math.floor(self:GetWidth() + .5);
				self.defaultHeight = math.floor(self:GetHeight() + .5);

				-- Load saved position
				local db = IsAddOnLoaded("BigInputBox") and BigInputBox_DB;
				if (db) and (db.point) and (db.offsetX) and (db.offsetX) then
					self:ClearAllPoints();
					self:SetPoint(db.point, db.offsetX, db.offsetY);
				else
					self:RegisterEvent("ADDON_LOADED");
				end
			</OnLoad>
			<OnEvent>
				if (event == "ADDON_LOADED") then
					local addon = ...;
					if (addon == "BigInputBox") then
						local db = BigInputBox_DB;
						if (db) and (db.point) and (db.offsetX) and (db.offsetX) then
							self:ClearAllPoints();
							self:SetPoint(BigInputBox_DB.point, BigInputBox_DB.offsetX, BigInputBox_DB.offsetY);
						end
					end
				end
			</OnEvent>
		</Scripts>
		<Frames>
			<Frame parentKey="uiHider" hidden="true" />
			<EditBox name="$parentEditBox" inherits="ChatFrameEditBoxTemplate" parentKey="editBox" frameStrata="FULLSCREEN" frameLevel="6" autoFocus="true" ignoreArrows="false" multiLine="false" toplevel="false" hidden="true">
				<Anchors>
					<Anchor point="CENTER"/>
				</Anchors>
				<Frames>
					<!-- Add an unused backdrop frame to avoid ElvUI and the likes putting double borders on our box. -->
					<Frame mixin="BigInputBoxBackdropTemplateMixin" parentKey="backdrop" hidden="true" />
					<Frame name="$parentBackdrop" mixin="BigInputBoxBackdropTemplateMixin" parentKey="Backdrop" frameStrata="FULLSCREEN" frameLevel="5">
						<Anchors>
							<Anchor point="TOPLEFT" x="-34" y="30"/>
							<Anchor point="BOTTOMRIGHT" x="34" y="-30"/>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetBackdrop({ 
									bgFile = [[Interface\ChatFrame\ChatFrameBackground]],
									edgeFile = [[Interface\AddOns\BigInputBox\media\rounded-backdrop-small.tga]], 
									edgeSize = 24,
									insets = { left = 24, right = 24, top = 24, bottom = 24 }
								});
								self:SetBackdropColor(0,0,0,.75);
								self:SetBackdropBorderColor(0,0,0,.75);
							</OnLoad>
						</Scripts>
					</Frame>
					<Frame name="$parentBorder" mixin="BigInputBoxBackdropTemplateMixin" parentKey="Border" frameStrata="FULLSCREEN" frameLevel="6">
						<Anchors>
							<Anchor point="TOPLEFT" x="-33" y="29"/>
							<Anchor point="BOTTOMRIGHT" x="33" y="-29"/>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetBackdrop({ 
									edgeFile = [[Interface\AddOns\BigInputBox\media\rounded-border-small.tga]], 
									edgeSize = 24
								});
							</OnLoad>
						</Scripts>
					</Frame>
					<Button name="$parentLanguageButton" parentKey="LanguageButton" frameStrata="FULLSCREEN" frameLevel="7" hidden="true">
						<Layers>
							<Layer level="OVERLAY" textureSubLevel="6">
								<FontString inherits="NumberFont_Outline_Large" justifyH="CENTER" justifyV="MIDDLE" parentKey="Language">
									<Size x="0" y="0"/>
									<Shadow>
										<Offset>
											<AbsDimension x="0" y="0"/>
										</Offset>
										<Color a="0" r="0" g="0" b="0"/>
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								local editBox = self:GetParent();

								self.Language:ClearAllPoints();
								self.Language:SetPoint("TOP", editBox, "BOTTOM", 0, -16);
								self.Language:SetFont(self.Language:GetFont(), 16, "THINOUTLINE");

								self:SetAllPoints(self.Language);
								self.currentLanguageIndex = 1;

								-- These can be nil, but the events below will update them.
								editBox.defaultLanguage = GetDefaultLanguage();
								editBox.alternativeDefaultLanguage = GetAlternativeDefaultLanguage();
								editBox.language, editBox.languageID = GetDefaultLanguage();

								self.LoadLanguages = function(self)

									-- Orcs and Humans speak their own languages, Orcish and Common.
									-- All other races have those, plus their own.
									if (not self.numLanguages or self.numLanguages == 1) then
										self.numLanguages = GetNumLanguages();
										if (self.numLanguages > 1) then
											editBox:SetHitRectInsets(0,0,0,-32);
											editBox:SetScript("OnEnter", function(self) 
												self.LanguageButton:Show()
											end)
											editBox:SetScript("OnLeave", function(self) 
												if (not self.LanguageButton:IsMouseOver()) then
													if (self.language == self.defaultLanguage) then
														self.LanguageButton:Hide();
													end
												end
											end)
										end
									end

									for i = 1,GetNumLanguages() do
										local language, languageID = GetLanguageByIndex(i);
										if (language == editBox.defaultLanguage) then
											self.currentLanguageIndex = i;
										end
									end

									editBox.language, editBox.languageID = GetLanguageByIndex(self.currentLanguageIndex);
								end

								self.Update = function(self)
									editBox.language, editBox.languageID = GetLanguageByIndex(self.currentLanguageIndex);
									self.Language:SetText(editBox.language)
								end

								self:SetScript("OnEvent", function(self, event, ...) 
									if (event == "PLAYER_ENTERING_WORLD") then
										editBox.defaultLanguage = GetDefaultLanguage();
										editBox.alternativeDefaultLanguage = GetAlternativeDefaultLanguage();
										self:LoadLanguages();

									elseif (event == "LANGUAGE_LIST_CHANGED") then
										self:LoadLanguages();

									elseif (event == "NEUTRAL_FACTION_SELECT_RESULT") then
										editBox.defaultLanguage = GetDefaultLanguage();
										editBox.alternativeDefaultLanguage = GetAlternativeDefaultLanguage();

									elseif (event == "ALTERNATIVE_DEFAULT_LANGUAGE_CHANGED") then
										editBox.alternativeDefaultLanguage = GetAlternativeDefaultLanguage();
									end
									self:Update();
								end)

								self:RegisterEvent("PLAYER_ENTERING_WORLD");
								self:RegisterEvent("LANGUAGE_LIST_CHANGED");
								self:RegisterEvent("NEUTRAL_FACTION_SELECT_RESULT");
								self:RegisterEvent("ALTERNATIVE_DEFAULT_LANGUAGE_CHANGED");

							</OnLoad>
							<OnShow>
								self:Update();
							</OnShow>
							<OnLeave>
								local editBox = self:GetParent();
								if (not editBox:IsMouseOver()) and (editBox.language == editBox.defaultLanguage) then
									self:Hide();
								end
							</OnLeave>
							<OnClick>
								local editBox = self:GetParent();
								editBox:ToggleInputLanguage();
								editBox:SetFocus();

								self.currentLanguageIndex = self.currentLanguageIndex + 1;
								if (self.currentLanguageIndex > GetNumLanguages()) then
									self.currentLanguageIndex = 1;
								end

								self:Update();
							</OnClick>
						</Scripts>
					</Button>
				</Frames>
				<Layers>
					<Layer level="OVERLAY" textureSubLevel="6">
						<FontString inherits="NumberFont_Outline_Large" justifyH="CENTER" justifyV="MIDDLE" parentKey="Label">
							<Size x="0" y="0"/>
							<Anchors>
								<Anchor point="BOTTOM" relativeKey="$parent" relativePoint="TOP" x="0" y="16"/>
							</Anchors>
							<Shadow>
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
								<Color a="0" r="0" g="0" b="0"/>
							</Shadow>
						</FontString>
					</Layer>
				</Layers>
				<Scripts>
					<OnLoad>

						-- Need this for resizing.
						for i=1,self:GetNumRegions() do
							local j = select(i, self:GetRegions());
							if (j:IsObjectType("FontString")) then
								local foundKey; 
								for k,l in pairs(self) do
									if self[k] == j then
										foundKey = true;
										break;
									end
								end
								if (not foundKey) then
									self.fontString = j; -- the unhashed entry is our fontstring
									break;
								end
							end
						end

						-- Store the defaults as constants relative to parent
						self.defaultWidth = math.floor(self:GetParent():GetWidth() + .5) - 32;
						self.defaultHeight = math.floor(self:GetParent():GetHeight() + .5) - 20;

						-- The min can't be larger, the inputbox textfield autowraps
						-- for no apparent reason around that size. Looking into it.
						self.minWidth, self.maxWidth = 300, 660;

						-- Size the box
						self:SetSize(self.defaultWidth, self.defaultHeight); 

						-- Give it a nice blink speed.
						self:SetBlinkSpeed(.5)

						-- Various flags and methods for compatibility
						self.chatFrame = self:GetParent();
						self.chatFrame.AddMessage = function(frame, ...) DEFAULT_CHAT_FRAME:AddMessage(...) end;
						self.chatLanguage = GetDefaultLanguage();
						self:SetAttribute("chatType", "SAY");
						self:SetAttribute("stickyType", "SAY");
						self:RegisterEvent("UPDATE_CHAT_COLOR");
						self.addSpaceToAutoComplete = true;
						self.addHighlightedText = true;

						local ChatEditAutoComplete = function(self, fullText, nameInfo, ambiguatedName)
							if hash_ChatTypeInfoList[string.upper(self.command)] == "SMART_WHISPER" then
								if nameInfo.bnetID ~= nil and nameInfo.bnetID ~= 0 then
									self:SetAttribute("tellTarget", nameInfo.name);
									self:SetAttribute("chatType", "BN_WHISPER");
								else
									self:SetAttribute("tellTarget", ambiguatedName);
									self:SetAttribute("chatType", "WHISPER");
								end
								self:SetText("");
								ChatEdit_UpdateHeader(self);
								return true;
							end
							return false;
						end
						AutoCompleteEditBox_SetCustomAutoCompleteFunction(self, ChatEditAutoComplete);

						self:HookScript("OnEnterPressed", function(self) 
							self.enterPressed = true;
							self:ClearFocus();
							self:GetParent():Hide();
						end)

						-- Fix the label font.
						self.Label:SetFont(self.Label:GetFont(), 18, "THINOUTLINE");

						-- Disable some Blizzard layers we don't need.
						self:DisableDrawLayer("BACKGROUND");
						self:DisableDrawLayer("BORDER");
						self:SetTextInsets(0,0,0,0);
						self.SetTextInsets = function() end

						for _,item in ipairs({ "focusLeft", "focusRight", "focusMid" }) do
							if (self[item]) then 
								self[item]:SetAlpha(0); 
							end
						end

						for _,item in ipairs({ "backdrop", "header", "headerSuffix", "NewcomerHint" }) do
							if (self[item]) then 
								self[item]:SetParent(self:GetParent().uiHider);
							end
						end
					</OnLoad>
					<OnEditFocusGained>
						self:Raise(); 
						self:SetAlpha(1); 
						-- Setting this is needed
						-- for items to be linked to the chat.
						ACTIVE_CHAT_EDIT_BOX = self; -- taint?
					</OnEditFocusGained>
					<OnEditFocusLost>
						-- Ignore this, the button will return the focus to us.
						if (self.LanguageButton:IsMouseOver()) then
							return
						end
						if (not self.escapePressed) then
							self.lostFocus = true;
						end
						self:GetParent():Hide();
					</OnEditFocusLost>
					<OnEscapePressed>
						self.escapePressed = true; 
						self:GetParent():Hide();
					</OnEscapePressed>
					<OnUpdate>
					</OnUpdate>
					<OnHide>
						-- The order of events: Esc pressed > Focus lost > Hiding
						local reset = (self.escapePressed or self.enterPressed) and (not self.lostFocus)
						if (reset) then
							self:SetText("");
						end
						-- Clear these before the next time.
						self.escapePressed = nil;
						self.enterPressed = nil;
						self.lostFocus = nil;
						-- Make sure the other chat boxes don't
						-- get focus when ours is hidden.
						ACTIVE_CHAT_EDIT_BOX = nil -- taint?
						local alpha = 0;
						if (SELECTED_CHAT_FRAME) then
							for index,tex in pairs(CHAT_FRAME_TEXTURES) do
								if (not string.find(tex, "Tab")) then
									local object = _G[SELECTED_CHAT_FRAME:GetName()..tex]
									if (object:IsShown()) then
										UIFrameFadeRemoveFrame(object);
										object:SetAlpha(alpha);
									end
								end
							end
						end
						-- reset chat type to avoid being stuck at whisper targets.
						if (reset) then
							ChatEdit_ResetChatTypeToSticky(self);
							ChatEdit_ResetChatType(self);
						end
					</OnHide>
				</Scripts>
				<FontString inherits="NumberFont_Outline_Large" justifyH="CENTER" justifyV="MIDDLE">
					<Shadow>
						<Offset>
							<AbsDimension x="0" y="0"/>
						</Offset>
						<Color a="0" r="0" g="0" b="0"/>
					</Shadow>
				</FontString>
			</EditBox>
			<Frame name="$parentMoveButton" parentKey="MoveButton">
				<Scripts>
					<OnLoad>
						self:EnableMouse(true);
						self:RegisterForDrag("LeftButton");
						self:SetAllPoints(self:GetParent().editBox.Label);
					</OnLoad>
					<OnMouseUp>
						if (IsShiftKeyDown()) then
							self:GetParent():ClearAllPoints();
							self:GetParent():SetPoint("BOTTOM", 0, 330);

							local point, offsetX, offsetY = self:GetParent().editBox:GetParsedPosition();
							BigInputBox_DB.point = point;
							BigInputBox_DB.offsetX = offsetX;
							BigInputBox_DB.offsetY = offsetY;
						end
					</OnMouseUp>
					<OnDragStart>
						self:GetParent():SetMovable(true);
						self:GetParent():SetUserPlaced(true);
						self:GetParent():StartMoving();
					</OnDragStart>
					<OnDragStop>
						self:GetParent():StopMovingOrSizing();

						-- Save the position, call lua callbacks to store and calculate.
						local point, offsetX, offsetY = self:GetParent().editBox:GetParsedPosition();
						BigInputBox_DB.point = point;
						BigInputBox_DB.offsetX = offsetX;
						BigInputBox_DB.offsetY = offsetY;

						self:GetParent():SetUserPlaced(false);
						self:GetParent():SetMovable(false);
					</OnDragStop>
				</Scripts>
			</Frame>
		</Frames>
	</Frame>

	<Button name="BigInputBoxToggleButton" inherits="SecureActionButtonTemplate" parent="UIParent">
		<Scripts>
			<OnClick>
				local frame = BigInputBox;
				if (frame.editBox:IsVisible()) then
					frame:Hide();
					frame.editBox:Hide();
					frame.editBox:ClearFocus();
				else
					frame:Show();
					frame.editBox:Show();
					frame.editBox:SetFocus();
				end
			</OnClick>
		</Scripts>
	</Button>

	<Button name="BigInputBoxReplyButton" inherits="SecureActionButtonTemplate" parent="UIParent">
		<Scripts>
			<OnClick>
				local frame = BigInputBox;
				local lastTell, lastTellType = ChatEdit_GetLastTellTarget();
				if (lastTell) then
					frame.editBox:SetAttribute("chatType", lastTellType);
					frame.editBox:SetAttribute("tellTarget", lastTell);
				end
				frame:Show();
				frame.editBox:Show();
				frame.editBox:SetFocus();
			</OnClick>
		</Scripts>
	</Button>

	<Button name="BigInputBoxRewhisperButton" inherits="SecureActionButtonTemplate" parent="UIParent">
		<Scripts>
			<OnClick>
				local frame = BigInputBox;
				local lastTold, lastToldType = ChatEdit_GetLastToldTarget();
				if (lastTold) then
					frame.editBox:SetAttribute("chatType", lastToldType);
					frame.editBox:SetAttribute("tellTarget", lastTold);
				end
				frame:Show();
				frame.editBox:Show();
				frame.editBox:SetFocus();
			</OnClick>
		</Scripts>
	</Button>

</Ui>